<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'">
    <title>SIM KManager - Sistema de Inventario</title>
    <link rel="stylesheet" href="../renderer/styles.css">
    <link rel="stylesheet" href="../renderer/neon.css">
    <link rel="stylesheet" href="agentes-ui.css">
    <link rel="icon" href="./kolbi.png" type="image/png">
    <!-- Detector de scripts duplicados primero -->
    <script src="duplicate-detector.js"></script>
    <!-- Adaptador de compatibilidad -->
    <script src="compatibility-adapter.js"></script>
    <!-- Puente API universal -->
    <script src="universal-api-bridge.js"></script>
    <!-- Cargar scripts de la aplicación -->
    <script src="agentes-ui.js" defer></script>
    <script src="cargar-agentes-fix.js"></script>
</head>
<body>
    <div id="app">
        <h1>SIM KManager - Sistema de Inventario</h1>
        <p>El sistema está iniciando...</p>
        <div id="status"></div>
    </div>

    <script>
        window.addEventListener('DOMContentLoaded', async () => {
    // NOTA: La carga de agentes se maneja en cargar-agentes-fix.js
    // No se llama a cargarAgentes() aqu+� para evitar duplicaci+�n
            const statusEl = document.getElementById('status');
            
            try {
                statusEl.textContent = 'Verificando API de Electron...';
                
                if (!window.electronAPI) {
                    throw new Error('API de Electron no disponible. Verifica la configuración de preload.js.');
                }
                
                statusEl.textContent = 'Cargando herramientas...';
                
                // Cargar los scripts de forma dinámica después de que la API esté disponible
                const scripts = [
                    './dom-protector.js', // Protección DOM primero
                    './missing-functions-polyfill.js', // Polyfills para funciones faltantes
                    // Eliminada la referencia duplicada a compatibility-adapter.js
                    './index-patches.js', // Parches específicos para index.html
                    './terminal-helpers.js',
                    './precargador.js',
                    './cache-tools.js'
                ];
                
                // Cargar scripts en orden
                for (let i = 0; i < scripts.length; i++) {
                    const scriptSrc = scripts[i];
                    await new Promise((resolve) => {
                        const script = document.createElement('script');
                        script.src = scriptSrc;
                        script.onload = resolve;
                        script.onerror = resolve; // Continuar incluso si hay error
                        document.head.appendChild(script);
                        console.log(`Cargando script: ${scriptSrc}`);
                    });
                }
                
                statusEl.textContent = 'Precargando datos...';
                
                try {
                    const result = await window.electronAPI.precargar();
                    if (result && result.ok) {
                        statusEl.textContent = 'Datos precargados correctamente.';
                    } else {
                        statusEl.textContent = 'Error en precarga: ' + (result?.error || 'Error desconocido');
                    }
                } catch (err) {
                    statusEl.textContent = 'Error en precarga: ' + err.message;
                }
                
            } catch (err) {
                statusEl.textContent = 'Error: ' + err.message;
                console.error(err);
            }
        });
    </script>
</body>
</html>
<main class="shell">
    <header class="topbar" style="background:#43b02a; padding:0;">
    <div class="kolbi-header-row">
        <div style="display:flex;align-items:center;gap:12px;">
        <img src="./kolbi.png" alt="Kolbi" style="height:32px;margin-right:8px;">
        <div style="display:flex;flex-direction:column;align-items:flex-start;min-width:180px;">
            <span class="kolbi-title">Entrega de SIMs Físicas Kolbi</span>
            <span class="kolbi-eslogan">#somos de los mismos</span>
        </div>
        </div>
        <nav class="tabs">
        <button class="tab active" data-target="#tab-form"><span class="tab-dot"></span> Formulario</button>
        <button class="tab" data-target="#tab-inventario"><span class="tab-dot"></span> Inventario</button>
        
        <button class="tab" data-target="#tab-entregas"><span class="tab-dot"></span> Entregas</button>
        <button class="tab" data-target="#tab-credits"><span class="tab-dot"></span> Créditos</button>
        </nav>
        <div class="row">
        <div id="neonClock" class="muted" aria-live="polite">--:--</div>
        <label for="miniDate" style="margin-right:6px;">Fecha:</label>
        <input id="miniDate" type="date" />
        </div>
    </div>
    </header>

<section id="tab-form" class="tabpanel active">
    <section class="card glass">
    <h2 class="card-title">Supervisor</h2>
    <div class="grid grid-3">
        <label class="full">Supervisor activo
        <div class="row">
            <input id="supCorreo" placeholder="correo@ice.go.cr" />
            <input id="supClave" type="password" placeholder="Clave" />
            <button id="btnLogin" type="button" class="btn btn-neon">Iniciar sesión</button>
            <button id="btnLogoff" type="button" class="btn btn-ghost">Salir</button>
        </div>
        <small id="supEstado" class="muted">No autenticado</small>
        </label>
    </div>
    <div id="guardNote" class="muted" style="margin-top:8px">
        * Solo el supervisor autenticado puede generar y enviar SIMs.
    </div>
    </section>

    <section class="card glass" data-guard="sims">
    <h2 class="card-title">Agente destino</h2>
    <div class="grid">
        <label class="full">Seleccionar agente (libreta)
        <select id="selAgente"></select>
        </label>
        <label>Agente
        <input id="agente" placeholder="Nombre del agente" />
        </label>
        <label>Usuario
        <input id="usuario" placeholder="Usuario/cliente (ej. rumadr)" />
        </label>
        <label class="full">Correo del agente
        <input id="correo" placeholder="correo@empresa.com" />
        </label>
    </div>
    <div class="subtle-title">Agregar / actualizar en libreta</div>
    <div class="grid grid-3">
        <input id="newNombre" placeholder="Nombre completo" />
        <input id="newUsuario" placeholder="Usuario (ej. emondragon)" />
        <input id="newCorreo"  placeholder="correo@ice.go.cr" />
    </div>
    <div class="row gap">
        <button id="btnAddAgente" class="btn btn-outline">Guardar agente</button>
        <button id="btnDelAgente" class="btn btn-outline btn-danger">Eliminar por correo</button>
    </div>
    </section>

    <section class="card glass" data-guard="sims">
    <h2 class="card-title">Detalle de SIMs</h2>
    <div class="grid">
        <label class="full">Contenido de la SIM (pegar aquí)
        <textarea id="contenido" rows="10" placeholder="Pegue el texto completo de la SIM…"></textarea>
        </label>
    </div>
    <div class="subtle-title">Firma del supervisor</div>
    <div class="sign-box">
        <img id="imgFirmaFija" src="./firmasupervisor.jpg" alt="Firma supervisor" style="max-width:300px;max-height:120px;">
        <small class="muted">Firma del supervisor</small>
    </div>
    <div class="row gap actions">
        <button id="btnGenerar" class="btn btn-neon big">Generar PDF y Enviar</button>
    </div>
    </section>

    <section class="card paper" data-guard="sims">
    <h2 class="card-title">Vista previa (PDF)</h2>
    <div id="preview" class="preview">
        <div class="preview-head">
        <div><strong>Agente:</strong> <span id="pvAgente">—</span></div>
        <div><strong>Usuario:</strong> <span id="pvUsuario">—</span></div>
        <div><strong>Correo:</strong> <span id="pvCorreo">—</span></div>
        <div><strong>Fecha:</strong> <span id="pvFecha">—</span></div>
        </div>
        <hr>
        <pre id="pvContenido"></pre>
        <div class="preview-sign">
        <img id="imgFirmaFijaPreview" src="./firmasupervisor.jpg" alt="firma del supervisor" style="max-width:300px;max-height:120px;" />
        <div class="sign-line">______________________________</div>
        <div class="sign-label">Firma del supervisor</div>
        </div>
    </div>
    </section>
</section>

<section id="tab-inventario" class="tabpanel">
    <section class="card glass">
    <h2 class="card-title">Inventario de Terminales</h2>
    <div style="margin-bottom:10px">
        <label class="full">Cargar terminales (pegar aquí, formato: Agencia,Marca,Terminal,Disponible)
        <textarea id="terminalesPaste" rows="6" placeholder="Pega aquí la lista de terminales..."></textarea>
        </label>
        <button id="btnCargarTerminales" class="btn btn-outline" style="margin-top:6px">Cargar terminales</button>
    </div>
    <div class="row gap" style="flex-wrap:wrap">
        <div class="muted">Actualizado: <span id="invFechaTag">—</span></div>
        <button id="btnInvRefrescar" class="btn btn-outline">Refrescar</button>
        <input id="invBuscar" placeholder="Buscar modelo…" style="max-width:260px" />
    </div>
    <div class="subtle-title">Filtrar por marca</div>
    <div class="row gap" style="flex-wrap:wrap">
        <button class="btn btn-ghost active" data-brand="all">Todas</button>
        <button class="btn btn-ghost" data-brand="Samsung">Samsung</button>
        <button class="btn btn-ghost" data-brand="Apple">Apple</button>
        <button class="btn btn-ghost" data-brand="Xiaomi">Xiaomi</button>
        <button class="btn btn-ghost" data-brand="Huawei">Huawei</button>
        <button class="btn btn-ghost" data-brand="Motorola">Motorola</button>
        <button class="btn btn-ghost" data-brand="Honor">Honor</button>
        <button class="btn btn-ghost" data-brand="Oppo">Oppo</button>
    </div>
    </section>
    <section class="card paper">
    <div class="grid full">
        <table id="tablaInventario" style="width:100%; border-collapse:collapse">
        <thead>
            <tr>
            <th style="text-align:left; padding:8px 6px;">Agencia</th>
            <th style="text-align:left; padding:8px 6px;">Marca</th>
            <th style="text-align:left; padding:8px 6px;">Terminal</th>
            <th style="text-align:right; padding:8px 6px;">Disponible</th>
            </tr>
        </thead>
        <tbody></tbody>
        </table>
    </div>
    <small class="muted">La lista se edita manualmente o pegando la lista en la interfaz.</small>
    </section>
</section>



<section id="tab-entregas" class="tabpanel">
    <section class="card glass">
        <h2 class="card-title">Historial de entregas</h2>
        <div id="graficoEntregas"></div>
        <div id="entregasList"></div>
        <label>Filtrar por correo:
            <input id="filtroCorreo" placeholder="Correo del agente" />
        </label>
        <button id="resetHistorialBtn" style="margin-top:16px;background:#c00;color:#fff;padding:8px 18px;border:none;border-radius:6px;cursor:pointer;">
            🗑️ Resetear historial de entregas
        </button>
        <button id="btnHistorialPdf" class="btn btn-outline">Generar PDF de historial</button>
    </section>
    
    <!-- Sección de notas que faltaba -->
    <section class="card glass">
        <h2 class="card-title">Notas del supervisor</h2>
        <div style="margin-bottom:10px">
            <label class="full">Agregar nueva nota:
                <textarea id="notaNueva" rows="3" placeholder="Escribe tu nota aquí..."></textarea>
            </label>
            <button id="btnAgregarNota" class="btn btn-outline" style="margin-top:6px">Guardar nota</button>
        </div>
        <div id="notasList"></div>
    </section>
</section>

<section id="tab-credits" class="tabpanel">
    <section class="card glass credits">
    <div class="credits-glow"></div>
    <h2 class="card-title">Créditos</h2>
    <div class="credits-body">
        <div class="credits-title">Ruben Madrigal Jimenez</div>
        <div class="credits-sub">Full Stack Developer — Infinix DEVcom</div>
        <p class="muted">
        Aplicación de escritorio para formateo de SIMs, firma de supervisor, generación de PDF
        y envío por correo corporativo con Microsoft Graph (OAuth2).
        </p>
    </div>
    </section>
</section>
</main>

<!-- Botones de diagnóstico y reparación (ocultos) -->
<div style="position: fixed; bottom: 10px; right: 10px; z-index: 9999;">
  <button id="btnDiagnostico" title="Diagnóstico del Sistema" 
          style="background: #303030; color: #fff; border: 1px solid #444; padding: 5px; cursor: pointer; margin-right: 5px;"
          onclick="ejecutarDiagnostico()">
    🔍 Diag
  </button>
  <button id="btnActualizarPreload" title="Actualizar preload.js (requiere reinicio)" 
          style="background: #303030; color: #fff; border: 1px solid #444; padding: 5px; cursor: pointer;"
          onclick="crearNuevoPreload()">
    🔄 Fix
  </button>
</div>

<script>
// Tabs
const tabs = document.querySelectorAll('.tab');
const panels = document.querySelectorAll('.tabpanel');
tabs.forEach(btn => {
    btn.addEventListener('click', () => {
    tabs.forEach(b => b.classList.remove('active'));
    panels.forEach(p => p.classList.remove('active'));
    btn.classList.add('active');
    const target = document.querySelector(btn.dataset.target);
    if (target) target.classList.add('active');
    });
});

// Reloj/fecha
const neonClock = document.getElementById('neonClock');
const miniDate  = document.getElementById('miniDate');
function pad(n){ return String(n).padStart(2,'0'); }
function tick() {
    const d = new Date();
    neonClock.textContent = `${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;
    if (!miniDate.value) miniDate.valueAsDate = d;
}
tick(); setInterval(tick, 1000);

// Guard SIMs
function setSimsGuard(isLogged) {
    document.querySelectorAll('[data-guard="sims"]').forEach(el => {
    el.style.pointerEvents = isLogged ? 'auto' : 'none';
    el.style.opacity = isLogged ? '1' : '0.45';
    });
    const note = document.getElementById('guardNote');
    if (note) note.style.display = isLogged ? 'none' : 'block';
}
setSimsGuard(false);

// Login/logout
let supervisorAutenticado = false;
document.getElementById('btnLogin').onclick = async function() {
    const correo = document.getElementById('supCorreo').value.trim();
    const clave  = document.getElementById('supClave').value.trim();
    if (!correo || !clave) return alert('Ingrese el correo y la clave');
    // Corregido: pasar parámetros (correo, clave) en lugar de un objeto
    const result = await window.electronAPI.authSupervisor(correo, clave);
    if (result.ok) {
        supervisorAutenticado = true;
        setSimsGuard(true);
        document.getElementById('supEstado').textContent = 'Autenticado como ' + correo;
        habilitarTerminales(true);
        // Cambiar firma según el correo
        actualizarFirmaSupervisor(correo);
        // Mensaje de bienvenida personalizado si está disponible
        if (typeof mostrarMensajeAutenticacion === 'function') {
            mostrarMensajeAutenticacion(correo);
        }
    } else {
        supervisorAutenticado = false;
        setSimsGuard(false);
        habilitarTerminales(false);
        alert('Correo o clave incorrectos');
    }
};

// Función para actualizar la firma según el correo
function actualizarFirmaSupervisor(correo) {
    // Establecer imagen de firma según el correo del supervisor
    const imgFirma = document.getElementById('imgFirmaFija');
    const imgPreview = document.getElementById('imgFirmaFijaPreview');
    
    if (correo.toLowerCase() === "msanabria@ice.go.cr") {
        console.log('UI: Usando firma de MSanabria');
        imgFirma.src = "./fima_supervisora.jpg";
        imgPreview.src = "./fima_supervisora.jpg";
    } else {
        console.log('UI: Usando firma predeterminada');
        imgFirma.src = "./firmasupervisor.jpg";
        imgPreview.src = "./firmasupervisor.jpg";
    }
}
document.getElementById('btnLogoff').onclick = function() {
    supervisorAutenticado = false;
    setSimsGuard(false);
    habilitarTerminales(false);
    document.getElementById('supEstado').textContent = 'No autenticado';
    document.getElementById('supCorreo').value = '';
    document.getElementById('supClave').value = '';
};

// Habilitar/deshabilitar controles de terminales
function habilitarTerminales(estado) {
    ['btnCargarTerminales','terminalesPaste']
    .forEach(id => { const el = document.getElementById(id); if (el) el.disabled = !estado; });
}

// Asegurar que se ejecute después de que el DOM esté listo
document.addEventListener('DOMContentLoaded', () => {
    habilitarTerminales(false);
    cargarAgentes(); // Cargar agentes cuando el DOM esté listo
    cargarNotas();
    cargarEntregas();
    
    // Asegurar que se cargue el reloj
    tick();
    setInterval(tick, 1000);
});

// ===== AGENTES =====
async function cargarAgentes() {
    try {
        const agentes = await window.electronAPI.listAgents();
        const sel = document.getElementById('selAgente');
        if (!sel) {
            console.error('Elemento selAgente no encontrado');
            return;
        }
        sel.innerHTML = '<option value="">— Seleccione —</option>';
        agentes.forEach(a => {
            const opt = document.createElement('option');
            opt.value = a.correo;
            opt.textContent = `${a.nombre || ''} (${a.correo})`;
            sel.appendChild(opt);
        });
    } catch (err) {
        console.error('Error al cargar agentes:', err);
    }
}
document.getElementById('selAgente').onchange = function() {
    const correo = this.value;
    window.electronAPI.listAgents().then(agentes => {
    const ag = agentes.find(a => a.correo === correo);
    document.getElementById('agente').value = ag?.nombre || '';
    document.getElementById('usuario').value = ag?.usuario || '';
    document.getElementById('correo').value  = ag?.correo || '';
    });
};
document.getElementById('btnAddAgente').onclick = async function() {
    const nombre = document.getElementById('newNombre').value.trim();
    const usuario = document.getElementById('newUsuario').value.trim();
    const correo  = document.getElementById('newCorreo').value.trim();
    if (!nombre || !usuario || !correo) return alert('Completa todos los campos');
    const result = await window.electronAPI.addAgent({ nombre, usuario, correo });
    if (result.ok) {
        await cargarAgentes();
        alert('Agente guardado');
        document.getElementById('newNombre').value = '';
        document.getElementById('newUsuario').value = '';
        document.getElementById('newCorreo').value  = '';
    }
};
document.getElementById('btnDelAgente').onclick = async function() {
    const correo = document.getElementById('newCorreo').value.trim();
    if (!correo) return alert('Indica el correo para eliminar');
    const result = await window.electronAPI.removeAgent(correo);
    if (result.ok) { 
        await cargarAgentes(); 
        alert('Agente eliminado'); 
    }
};

// ===== Firma fija + preview =====
function actualizarPreviewSIM() {
    document.getElementById('pvAgente').textContent   = document.getElementById('agente').value;
    document.getElementById('pvUsuario').textContent  = document.getElementById('usuario').value;
    document.getElementById('pvCorreo').textContent   = document.getElementById('correo').value;
    document.getElementById('pvFecha').textContent    = miniDate.value;
    document.getElementById('pvContenido').textContent= document.getElementById('contenido').value;
}
['agente','usuario','correo','contenido'].forEach(id => {
    const el = document.getElementById(id);
    el.oninput = actualizarPreviewSIM;
});
miniDate.oninput = actualizarPreviewSIM;

// ===== Generar PDF y (futuro) enviar =====
document.getElementById('btnGenerar').onclick = async function() {
    if (!supervisorAutenticado) return alert('Debe autenticarse como supervisor.');
    actualizarPreviewSIM();

    const payload = {
    agente:   document.getElementById('agente').value.trim(),
    usuario:  document.getElementById('usuario').value.trim(),
    correo:   document.getElementById('correo').value.trim(),
    fecha:    document.getElementById('miniDate').value,
    contenido:document.getElementById('contenido').value,
    supervisorCorreo: document.getElementById('supCorreo').value.trim() // Enviar el correo del supervisor
    };

    const res = await window.electronAPI.generateAndSendSIM(payload);
    if (res?.ok) alert(`PDF generado en:\n${res.path}${res.sent ? '\nCorreo enviado.' : ''}`);
    else alert(`Error al generar/enviar: ${res?.error || 'desconocido'}`);
};

// ===== Inventario (carga/render básicos) =====
let terminalesData = [];
async function cargarTerminales() {
    try {
        console.log('Solicitando terminales al backend...');
        // Mostrar estado de carga en la interfaz
        document.getElementById('invFechaTag').textContent = 'Cargando...';
        
        // Solicitar datos al backend
        const result = await window.electronAPI.listTerminales();
        
        // Validar resultado
        if (!Array.isArray(result)) {
            console.error('Respuesta inválida al cargar terminales:', result);
            document.getElementById('invFechaTag').textContent = 'Error de formato';
            return;
        }
        
        // Actualizar datos
        terminalesData = result;
        console.log(`${terminalesData.length} terminales cargadas`);
        
        // Renderizar datos en la tabla
        const filterBrand = document.querySelector('.btn.btn-ghost.active')?.dataset?.brand || 'all';
        const searchTerm = document.getElementById('invBuscar')?.value || '';
        renderInventarioTerminales(filterBrand, searchTerm);
        
        // Actualizar estado
        actualizarFechaInventario();
        
    } catch (err) {
        console.error('Error al cargar terminales:', err);
        document.getElementById('invFechaTag').textContent = 'Error: ' + (err.message || 'desconocido');
        // Limpiar tabla en caso de error
        document.querySelector('#tablaInventario tbody').innerHTML = 
            '<tr><td colspan="4" style="color:red;text-align:center;padding:15px;">Error al cargar datos</td></tr>';
    }
}
function renderInventarioTerminales(filterBrand = 'all', search = '') {
    const tbody = document.querySelector('#tablaInventario tbody');
    // Limpiar la tabla antes de actualizar
    tbody.innerHTML = '';
    
    // Mostrar indicador de carga
    const loadingRow = document.createElement('tr');
    loadingRow.innerHTML = '<td colspan="4" style="text-align:center;padding:15px;">Cargando terminales...</td>';
    tbody.appendChild(loadingRow);
    
    try {
        // Filtrar terminales según criterios
        const terminos = terminalesData.filter(t => {
            if (!t || typeof t !== 'object') return false; // Validar entradas
            
            const brandOk = filterBrand === 'all' || 
                (t.marca && t.marca.toLowerCase() === filterBrand.toLowerCase());
                
            const searchLower = (search || '').toLowerCase();
            const textOk = !searchLower || 
                (t.terminal && t.terminal.toLowerCase().includes(searchLower)) ||
                (t.marca && t.marca.toLowerCase().includes(searchLower)) ||
                (t.agencia && t.agencia.toLowerCase().includes(searchLower));
                
            return brandOk && textOk;
        });
        
        // Limpiar el mensaje de carga
        tbody.innerHTML = '';
        
        // Si no hay resultados después del filtrado
        if (terminos.length === 0) {
            const emptyRow = document.createElement('tr');
            emptyRow.innerHTML = '<td colspan="4" style="text-align:center;padding:15px;">No hay terminales que coincidan con los filtros</td>';
            tbody.appendChild(emptyRow);
            return;
        }
        
        // Renderizar las filas de la tabla
        for (const t of terminos) {
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td style="padding:6px;">${t.agencia || ''}</td>
                <td style="padding:6px;">${t.marca || ''}</td>
                <td style="padding:6px;">${t.terminal || ''}</td>
                <td style="padding:6px; text-align:right;">${Number(t.disponible) || 0}</td>`;
            tbody.appendChild(tr);
        }
        
        // Mostrar total filtrado vs total en bruto
        if (terminos.length < terminalesData.length) {
            const footerRow = document.createElement('tr');
            footerRow.innerHTML = `<td colspan="4" style="text-align:right;padding:10px;font-size:0.9em;">
                Mostrando ${terminos.length} de ${terminalesData.length} terminales
            </td>`;
            tbody.appendChild(footerRow);
        }
        
    } catch (err) {
        console.error('Error al renderizar terminales:', err);
        tbody.innerHTML = '<td colspan="4" style="text-align:center;color:#c00;padding:15px;">Error al mostrar las terminales</td>';
    }
}
function actualizarFechaInventario() {
    const el = document.getElementById('invFechaTag');
    if (el) el.textContent = new Date().toLocaleString();
}

document.getElementById('btnCargarTerminales').onclick = async () => {
    try {
        // Obtener texto pegado
        const txt = document.getElementById('terminalesPaste').value.trim();
        if (!txt) {
            alert('No hay datos para cargar. Por favor, pegue los datos en formato: Agencia,Marca,Terminal,Disponible');
            return;
        }
        
        // Mostrar procesamiento
        document.getElementById('btnCargarTerminales').textContent = 'Procesando...';
        document.getElementById('btnCargarTerminales').disabled = true;
        
        // Analizar filas
        let rows;
        if (txt.includes('\t')) {
            // Formato con tabuladores
            rows = txt.split(/\r?\n/).map(line => line.split('\t').map(v => v.trim()));
        } else if (txt.includes(',')) {
            // Formato CSV
            rows = txt.split(/\r?\n/).map(line => line.split(',').map(v => v.trim()));
        } else {
            alert('Formato no reconocido. Use tabuladores o comas para separar los campos.');
            document.getElementById('btnCargarTerminales').textContent = 'Cargar terminales';
            document.getElementById('btnCargarTerminales').disabled = false;
            return;
        }
        
        // Validar y convertir datos
        const bulk = rows
            .filter(r => r.length >= 4)
            .map(([agencia, marca, terminal, disponible]) => ({
                agencia, marca, terminal, disponible: Number(disponible) || 0
            }));
        
        // Verificar si hay datos válidos
        if (bulk.length === 0) {
            alert('No se encontraron datos válidos. El formato debe ser: Agencia,Marca,Terminal,Disponible');
            document.getElementById('btnCargarTerminales').textContent = 'Cargar terminales';
            document.getElementById('btnCargarTerminales').disabled = false;
            return;
        }
        
        // Enviar datos al backend
        console.log(`Enviando ${bulk.length} terminales al backend`);
        const res = await window.electronAPI.bulkAddTerminales(bulk);
        
        // Procesar respuesta
        if (res?.ok) { 
            await cargarTerminales(); 
            alert(`Cargados ${res.count} registros correctamente`);
            // Limpiar campo después de carga exitosa
            document.getElementById('terminalesPaste').value = '';
        } else {
            alert(`Error al cargar terminales: ${res?.error || 'Desconocido'}`);
        }
    } catch (err) {
        console.error('Error en carga masiva:', err);
        alert(`Error al procesar datos: ${err.message || 'Desconocido'}`);
    } finally {
        // Restaurar botón siempre
        document.getElementById('btnCargarTerminales').textContent = 'Cargar terminales';
        document.getElementById('btnCargarTerminales').disabled = false;
    }
};

document.getElementById('btnInvRefrescar').onclick = cargarTerminales;
document.getElementById('invBuscar').oninput = (e) => {
    const brandBtn = document.querySelector('.btn.btn-ghost.active');
    const brand = brandBtn?.dataset?.brand || 'all';
    renderInventarioTerminales(brand, e.target.value || '');
};
document.querySelectorAll('[data-brand]').forEach(btn => {
    btn.onclick = () => {
        document.querySelectorAll('[data-brand]').forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        renderInventarioTerminales(btn.dataset.brand, document.getElementById('invBuscar').value || '');
    };
});
cargarTerminales();

// ===== Notas del supervisor =====
async function cargarNotas() {
    const notasList = document.getElementById('notasList');
    if (!notasList) {
        console.warn('Elemento notasList no encontrado');
        return; // Salir si no existe el elemento
    }
    
    try {
        const notas = await window.electronAPI.listNotas();
        notasList.innerHTML = '';
        notas.forEach(nota => {
            const div = document.createElement('div');
            div.className = 'nota-item';
            div.innerHTML = `
                <div>
                    <b>${nota.autor}</b> <span class="muted">${nota.fecha} ${nota.hora}</span>
                </div>
                <div>${nota.texto}</div>
                <button class="btn btn-outline" onclick="editarNota('${nota.id}')">Editar</button>
                <button class="btn btn-danger" onclick="borrarNota('${nota.id}')">Borrar</button>
                <hr>
            `;
            notasList.appendChild(div);
        });
    } catch (error) {
        console.error('Error al cargar notas:', error);
    }
}
document.getElementById('btnAgregarNota').onclick = async function() {
    const boton = document.getElementById('btnAgregarNota');
    if (!boton) {
        console.warn('Elemento btnAgregarNota no encontrado');
        return;
    }
    
    const notaNueva = document.getElementById('notaNueva');
    if (!notaNueva) {
        console.warn('Elemento notaNueva no encontrado');
        return;
    }
    
    const texto = notaNueva.value.trim();
    if (!texto) return alert('Escribe una nota');
    const fecha = new Date().toISOString().slice(0,10);
    const hora = new Date().toLocaleTimeString('es-CR', { hour: '2-digit', minute: '2-digit' });
    const autor = document.getElementById('supCorreo').value || 'Supervisor';
    await window.electronAPI.addNota({ texto, fecha, hora, autor });
    notaNueva.value = '';
    cargarNotas();
};
window.editarNota = async function(id) {
    const notas = await window.electronAPI.listNotas();
    const nota = notas.find(n => n.id === id);
    if (!nota) return;
    const nuevoTexto = prompt('Editar nota:', nota.texto);
    if (nuevoTexto !== null) {
        await window.electronAPI.editNota({ ...nota, texto: nuevoTexto });
        cargarNotas();
    }
};
window.borrarNota = async function(id) {
    if (confirm('¿Eliminar esta nota?')) {
        await window.electronAPI.removeNota(id);
        cargarNotas();
    }
};

// ===== Historial de entregas y gráfico =====
async function cargarEntregas() {
    const entregasList = document.getElementById('entregasList');
    const graficoDiv = document.getElementById('graficoEntregas');
    const filtroCorreo = document.getElementById('filtroCorreo').value.trim();
    const entregas = await window.electronAPI.listHistorial(filtroCorreo || null);

    // Listado
    entregasList.innerHTML = '';
    entregas.forEach(e => {
        const div = document.createElement('div');
        div.className = 'entrega-item';
        div.innerHTML = `
            <div><b>${e.agente}</b> <span class="muted">${e.fecha} ${e.hora}</span></div>
            <div><b>Usuario:</b> ${e.usuario} <b>Correo:</b> ${e.correo}</div>
            <pre>${e.contenido}</pre>
            <a href="${e.pdf}" target="_blank">Abrir PDF</a>
            <hr>
        `;
        entregasList.appendChild(div);
    });

    // Gráfico simple: entregas por agente
    const conteo = {};
    entregas.forEach(e => {
        conteo[e.agente] = (conteo[e.agente] || 0) + 1;
    });
    graficoDiv.innerHTML = '<h4>Entregas por agente</h4>';
    Object.entries(conteo).forEach(([agente, total]) => {
        const bar = document.createElement('div');
        bar.style.background = '#0c59cc';
        bar.style.color = '#fff';
        bar.style.margin = '4px 0';
        bar.style.padding = '4px 8px';
        bar.style.width = `${40 + total * 40}px`;
        bar.textContent = `${agente}: ${total}`;
        graficoDiv.appendChild(bar);
    });
}
document.getElementById('filtroCorreo').oninput = cargarEntregas;
document.getElementById('btnHistorialPdf').onclick = async function() {
    const correo = document.getElementById('filtroCorreo').value.trim();
    if (!correo) return alert('Indica el correo para el PDF');
    const res = await window.electronAPI.historialPdf(correo);
    if (res?.ok) alert(`PDF generado en:\n${res.path}`);
    else alert(`Error al generar PDF: ${res?.error || 'desconocido'}`);
};

// Manejador para el botón de resetear historial
document.getElementById('resetHistorialBtn').onclick = async function() {
    if (confirm("¿Está seguro que desea reiniciar el historial? Esta acción no se puede deshacer.")) {
        try {
            const result = await window.electronAPI.resetHistorial();
            if (result && result.ok) {
                alert("Historial reiniciado correctamente");
                // Recargar la lista de entregas
                await cargarEntregas();
            } else {
                alert("Error al reiniciar historial: " + (result?.error || "desconocido"));
            }
        } catch (err) {
            console.error("Error al resetear historial:", err);
            alert("Error: " + err.message);
        }
    }
};

// Función para ejecutar el diagnóstico del sistema
async function ejecutarDiagnostico() {
    try {
        if (!window.electronAPI || typeof window.electronAPI.diagnostico !== 'function') {
            alert('Error: API de diagnóstico no disponible');
            return;
        }
        
        const resultado = await window.electronAPI.diagnostico();
        console.log('Diagnóstico del sistema:', resultado);
        alert('Diagnóstico completado. Revisa la consola para más detalles.');
    } catch (err) {
        console.error('Error al ejecutar diagnóstico:', err);
        alert('Error al ejecutar diagnóstico: ' + err.message);
    }
}

// Función para ejecutar el diagnóstico de preload
async function diagnosticarPreload() {
    try {
        if (!window.electronAPI || typeof window.electronAPI.debugPreload !== 'function') {
            alert('Error: API de diagnóstico de preload no disponible');
            return;
        }
        
        const resultado = await window.electronAPI.debugPreload();
        console.log('Diagnóstico de preload:', resultado);
        
        // Verificar si existe bulkAddTerminales
        if (window.electronAPI.bulkAddTerminales) {
            console.log('bulkAddTerminales ESTÁ DISPONIBLE en window.electronAPI');
        } else {
            console.error('bulkAddTerminales NO ESTÁ DISPONIBLE en window.electronAPI');
        }
        
        alert('Diagnóstico de preload completado. Revisa la consola para más detalles.');
    } catch (err) {
        console.error('Error al ejecutar diagnóstico de preload:', err);
        alert('Error al ejecutar diagnóstico de preload: ' + err.message);
    }
}

// Función para crear nuevo preload y reemplazar el existente
async function crearNuevoPreload() {
    try {
        if (!window.electronAPI || typeof window.electronAPI.crearNuevoPreload !== 'function') {
            alert('Error: API para crear nuevo preload no disponible');
            return;
        }
        
        const confirmar = confirm('¿Estás seguro que deseas actualizar el preload.js? La aplicación necesitará reiniciarse.');
        if (!confirmar) return;
        
        const resultado = await window.electronAPI.crearNuevoPreload();
        console.log('Resultado de crear nuevo preload:', resultado);
        
        alert('Se ha creado un nuevo preload.js. Por favor ejecuta el script actualizar-preload.js y reinicia la aplicación.');
    } catch (err) {
        console.error('Error al crear nuevo preload:', err);
        alert('Error al crear nuevo preload: ' + err.message);
    }
}
</script>
</body>
</html>
